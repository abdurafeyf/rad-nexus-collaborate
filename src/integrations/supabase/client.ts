
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ruueewpswsmmagpsxbvk.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ1dWVld3Bzd3NtbWFncHN4YnZrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYyNjA0MjIsImV4cCI6MjA2MTgzNjQyMn0.Q4b26dnooV_Kx1wywO6vuTJul8Z4ZTu5YnWhhK8FFUM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storage: typeof window !== 'undefined' ? localStorage : undefined
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  },
  db: {
    schema: 'public'
  }
});

// Add helper function to check if user is authenticated
export const isAuthenticated = async () => {
  try {
    const { data, error } = await supabase.auth.getSession();
    if (error) {
      console.error("Error checking authentication:", error);
      return false;
    }
    return !!data.session;
  } catch (e) {
    console.error("Exception checking authentication:", e);
    return false;
  }
};

// Helper function to get the current user's ID
export const getCurrentUserId = async (): Promise<string | null> => {
  try {
    const { data, error } = await supabase.auth.getUser();
    if (error || !data.user) {
      console.error("Error getting current user:", error);
      return null;
    }
    return data.user.id;
  } catch (e) {
    console.error("Exception getting current user:", e);
    return null;
  }
};

// Helper function to get doctor ID from user ID
export const getDoctorIdFromUserId = async (userId: string): Promise<string | null> => {
  try {
    const { data, error } = await supabase
      .from("doctors")
      .select("id")
      .eq("user_id", userId)
      .maybeSingle();
    
    if (error) {
      console.error("Error getting doctor ID:", error);
      return null;
    }
    
    return data?.id || null;
  } catch (e) {
    console.error("Exception getting doctor ID:", e);
    return null;
  }
};

// Helper function to check if there are any organizations
export const hasAnyOrganizations = async (): Promise<boolean> => {
  try {
    const { count, error } = await supabase
      .from("organizations")
      .select("*", { count: 'exact', head: true });
    
    if (error) {
      console.error("Error checking organizations:", error);
      return false;
    }
    
    return (count || 0) > 0;
  } catch (e) {
    console.error("Exception checking organizations:", e);
    return false;
  }
};

// Helper function to check if there are any doctors
export const hasAnyDoctors = async (): Promise<boolean> => {
  try {
    const { count, error } = await supabase
      .from("doctors")
      .select("*", { count: 'exact', head: true });
    
    if (error) {
      console.error("Error checking doctors:", error);
      return false;
    }
    
    return (count || 0) > 0;
  } catch (e) {
    console.error("Exception checking doctors:", e);
    return false;
  }
};
